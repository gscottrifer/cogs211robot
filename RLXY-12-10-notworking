// Created Nick Livingston 2017
// Modified R Lee 2018

//*************************************************** Function Declarations ***********************************************************//

//Behavior Primitive Functions
int check_bluered();
int check_siren();
void run_away();

int check_escape_conditions();
void escape();

int check_seek_dark_conditions();
void seek_dark();

int check_avoid_conditions();
void avoid();

void straight_cruise();
void stop();
int min(int first, int second);
int max(int first, int second);

//Motor Control Function
void drive(float left, float right, float delay_seconds);

//*************************************************** Global Constant Declarations ****************************************************//
const int FRONT_BUMP = 0;
const int BACK_BUMP = 1;//15;
const int LEFT_PHOTO = 2;
const int RIGHT_PHOTO = 3;
const int LEFT_IR = 4;
const int RIGHT_IR = 5;
const int MIC_READ = 6;

const int LEFT_MOTOR = 0;
const int RIGHT_MOTOR = 3;

const float SERVO_MAX = 2047.0;
const float TOP_SPEED = 1023.0;//100;

//Boolean Constants
const int TRUE = 1;
const int FALSE = 0;

//*************************************************** Function Definitions ****************************************************//
int main() 
{
	int i = 0;
	enable_servos();
  camera_open(LOW_RES);
		
	while(1){
    if(check_red()){
		i++;
		}else if(check_siren()){
        i++;
        }
     if(i == 2){
		 run_away();
		 }else if(check_escape_conditions()){
			escape();
		}
		else if(check_avoid_conditions()){
			avoid();
		}
		else if(check_seek_dark_conditions()){
			seek_dark();
		}
		else{straight_cruise();}
	}	
	return 0;
}
/******************************************************/
int check_red(){
  camera_update();
  if((get_object_count(0)>0)&&(get_object_area(0,0)>20)){
    return TRUE;
  }
  else{
		return FALSE;
	}    
}

/******************************************************/
int check_siren(){
	int sound_threshold = 45;
	int sound_value = analog_et(MIC_READ);
	if(sound_value >= sound_threshold){
		return TRUE;
	}else{
		return FALSE;
	}
}
/******************************************************/
void run_away(){
  drive(1.0, 1.0, 0.5);
  msleep(15000);
}

/******************************************************/
int check_escape_conditions(){
	int bump_threshold = 0;
	int bump_max = 400;
	int front_bump_value = analog10(FRONT_BUMP);
	
	if(front_bump_value >= bump_threshold && front_bump_value <= bump_max){
		return TRUE;
	}else{
		return FALSE;
	}
}
/******************************************************/
void escape(){
	int bump_threshold = 250;
	int bump_max = 400;
	int front_bump_value = analog10(FRONT_BUMP);
	//printf("EscapeFrontBump()\n");
	if(front_bump_value < bump_threshold){
		//drive(-0.25, 0.75, 0.50);
		drive(-0.0, -0.90, 0.50);
		//printf("drive(-0.25, -0.75, 1.5);\n");
	}
	else if(front_bump_value >= bump_threshold && front_bump_value <= bump_max){
		//drive(0.75, -0.25, 0.50);
		drive(-0.90, -0.0, 0.50);
		//printf("drive(-0.75, -0.25, 1.5);\n");
	}
}
/******************************************************/
int check_seek_dark_conditions(){
	int left_photo_value;
	int right_photo_value;
	int photo_difference;
	int photo_threshold = 10;
	
	left_photo_value = analog_et(LEFT_PHOTO);
	right_photo_value = analog_et(RIGHT_PHOTO);
	photo_difference = left_photo_value - right_photo_value;

	if(abs(photo_difference) > photo_threshold){
		return TRUE;
	}
	else{
		return FALSE;
	}
}
/******************************************************/
void seek_dark(){
	int left_photo_value;
	int right_photo_value;
	int photo_difference;
	float photo_ratio;
	float left_servo;
	float right_servo;
	int photo_threshold = 0;
	
	left_photo_value  = analog_et(LEFT_PHOTO);
	right_photo_value = analog_et(RIGHT_PHOTO);
	//printf("left_photo = %d, right_photo = %d\n", left_photo_value, right_photo_value);
	photo_difference  = left_photo_value - right_photo_value;
	photo_ratio       = (float)photo_difference/1023.0;

	if(abs(photo_ratio) > photo_threshold){
		right_servo = right_photo_value/1023.0;
		left_servo  = left_photo_value/1023.0;
	}

	//printf("left_servo = %f, right_servo = %f\n", left_servo, right_servo);
	drive(left_servo, right_servo, 0.25);
	
}
/******************************************************/
int check_avoid_conditions(){
	int left_ir_value;
	int right_ir_value;
	int avoid_threshold = 500;
	
	left_ir_value = analog_et(LEFT_IR);
	right_ir_value = analog_et(RIGHT_IR);
	
	if(left_ir_value > avoid_threshold || right_ir_value > avoid_threshold){
		return TRUE;
	}else{
		return FALSE;
	}
}

//***************

void avoid(){
	int left_ir_value;
	int right_ir_value;
	int avoid_threshold = 500;
	
	left_ir_value = analog_et(LEFT_IR);
	right_ir_value = analog_et(RIGHT_IR);
	
	if(left_ir_value > avoid_threshold){
		drive(0.5, -0.5, 0.1);
	}
	
	else if(right_ir_value > avoid_threshold){
		drive(-0.5, 0.5, 0.1);
	}
}

/******************************************************/
void straight_cruise(){
	drive(0.40, 0.40, 0.5);
}
/******************************************************/
void stop(){
	drive(0.0, 0.0, 0.25);
}
/******************************************************/
void drive(float left, float right, float delay_seconds){
	float left_speed;
	float right_speed;
	
	delay_seconds *= 1000;
	//printf("left = %f, right = %f, TOP_SPEED = %f\n", left, right, TOP_SPEED);
	
	right_speed = TOP_SPEED - (right * TOP_SPEED);
	left_speed  = TOP_SPEED + (left * TOP_SPEED);
	
	//printf("left_speed = %f, right_speed = %f\n", left_speed, right_speed);	
	set_servo_position(LEFT_MOTOR, left_speed);
	set_servo_position(RIGHT_MOTOR, right_speed);
	msleep(delay_seconds);
	//disable_servos();
}
/******************************************************/
int min(int first, int second)
{
	int minValue = 0;
	if(first < second){
		minValue = first;
	}else{
		minValue = second;
	}
	return minValue;
}
/******************************************************/
int max(int first, int second)
{
	int maxValue = 0;
	
	if(first > second){
		maxValue = first;
	}else{
		maxValue = second;
	}
	
	return maxValue;
}
